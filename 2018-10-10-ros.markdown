---
layout:     post
title:      "motion planning平台搭建（二）"
subtitle:   " \"motion planning平台搭建（二）\""
date:       2018-10-10 15:52:00
author:     "xbbleon"
header-img: "img/post-bg-2015.jpg"
tags:
    - ROS Moveit
---
## motion planning平台搭建（二）
这部分主要关于基于c++的运动规划、场景中基于点云数据添加八叉树图(octomap)、基于八叉树图的碰撞避免路径规划、以及生成路径的插值处理等。

---
### 1 基于c++的路径规划
这部分相当于用c++写一个节点，这个节点的功能就是和move_group节点通信，调用moveit的api进行motionplanning，后面我们可以通过rqt_graph来查看相关关系。

首先是写c++节点的方式，ros官方教程说的很清楚了，这里就简单过一遍。

首先在irb1200_control文件夹的src目录下，新建文件motion_planning_demo.cpp文件，写入以下内容：

```
#include <moveit/move_group_interface/move_group_interface.h>
#include <std_msgs/String.h>
#include <moveit_msgs/DisplayTrajectory.h>
#include <iostream>
#include <sstream>


int main(int argc, char **argv)
{
    ros::init(argc, argv, "move_group_plan_single_target");
    ros::NodeHandle nh;

    ros::AsyncSpinner spin(1);
    spin.start();

    // Get the arm planning group
    moveit::planning_interface::MoveGroupInterface plan_group("irb1200");
    //设置规划算法
    plan_group.setPlannerId("BiTRRTkConfigDefault");
    //ROS_INFO_STREAM("Algorithm Names:"<< plan_group.getPlannerId());
    // Create a published for the arm plan visualization，这里先留着，后期有用
    ros::Publisher display_pub = nh.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
    
    // 打印当前机器人的各个关节状态
    std::vector<double> currentJoints = plan_group.getCurrentJointValues();
    for(std::size_t i=0; i<currentJoints.size();i++)
    {
      ROS_INFO_STREAM("current Joint"<<(i+1)<<":"<<currentJoints[i]);
    }

    //设定目标关节
    std::vector<double> targetJoints = currentJoints;
    targetJoints[0] = 2.7;
    targetJoints[1] = 0;
    targetJoints[2] = -3.49;
    targetJoints[3] = 4.5;
    targetJoints[4] = 2.0;
    targetJoints[5] = 0.0;
    //设置误差范围
    plan_group.setGoalTolerance(0.001);
    plan_group.setJointValueTarget(targetJoints);


    moveit::planning_interface::MoveGroupInterface::Plan goal_plan;
    if (plan_group.plan(goal_plan))
    {
        moveit_msgs::DisplayTrajectory display_msg;
        display_msg.trajectory_start = goal_plan.start_state_;
        display_msg.trajectory.push_back(goal_plan.trajectory_);
        std::vector<int>::size_type size1 = goal_plan.trajectory_.joint_trajectory.points.size();

        //以下输出waypoints,这部分先留着后期会用来保存waypoints
        //std::vector<float> positionJoint; 
        int k = 0;
        for (unsigned i = 0;i<size1;i++)
        {
          std::vector<int>::size_type size2 = goal_plan.trajectory_.joint_trajectory.points[i].positions.size();
          ros::Duration duration;
          duration = goal_plan.trajectory_.joint_trajectory.points[i].time_from_start;
          float nsec_to_sec;
          float time_from_start;
          nsec_to_sec = duration.nsec*0.000000001;
          time_from_start = duration.sec + nsec_to_sec;
          //ROS_INFO_STREAM("position size: "<<size2); 
          std::stringstream ss;
          ss << "points_index: "<< i << std::endl
          << "positions:"
          <<"["<<goal_plan.trajectory_.joint_trajectory.points[i].positions[0]
          <<","<<goal_plan.trajectory_.joint_trajectory.points[i].positions[1]
          <<","<<goal_plan.trajectory_.joint_trajectory.points[i].positions[2]
          <<","<<goal_plan.trajectory_.joint_trajectory.points[i].positions[3]
          <<","<<goal_plan.trajectory_.joint_trajectory.points[i].positions[4]
          <<","<<goal_plan.trajectory_.joint_trajectory.points[i].positions[5]
          << "]" << std::endl
          << "time_from_start: "
             << "[" << time_from_start
             << "]" << std::endl;;
          ROS_INFO_STREAM(ss.str());
          
        }
        sleep(1.0);
        plan_group.execute(goal_plan);
    }

    ros::shutdown();

    return 0;
}

```
接着，将文件变成可执行文件，进入CMakeLists.txt文件，加入以下内容：

```
add_executable(motion_planning_demo src/motion_planning_demo.cpp)
target_link_libraries(motion_planning_demo ${catkin_LIBRARIES})
add_dependencies(motion_planning_demo irb1200_control_generate_messages_cpp)
```
然后编译以下ws，记住，每次对cpp文件进行了修改就需要编译一下ws。

进行测试开启两个终端，在第一个终端中输入：

```
roslaunch irb1200_control motion_planning.launch 
```
在另一个终端中输入：

```
rosrun irb1200_control motion_planning_demo
```
然后就可以看到机器人运动，是不是姿势很奇怪，因为我想要测试一下关节极限。
### 2 场景中基于点云数据添加octomap
这里我是通过.pcd文件读取点云数据，然后通过octomap api将点云数据转换octomap，最后通过/planning_scene话题发布出去，在rviz中显示出来。
同样，在src目录下新建文件octomap_demo.cpp：

```
/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2012, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta, Michael Lautman */

#include <ros/ros.h>
#include <geometry_msgs/Pose.h>

// MoveIt!
#include <moveit_msgs/PlanningScene.h>
#include <moveit_msgs/GetStateValidity.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/ApplyPlanningScene.h>

#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/robot_state/conversions.h>


#include <octomap/octomap.h>
#include <octomap_msgs/Octomap.h>
#include <pcl/point_cloud.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/io/pcd_io.h>
#include <octomap_msgs/conversions.h>

int main(int argc, char** argv)
{
  ros::init(argc, argv, "planning_scene_ros_api_tutorial");
  ros::AsyncSpinner spinner(1);
  spinner.start();

  ros::NodeHandle node_handle;
  ros::Publisher planning_scene_diff_publisher = node_handle.advertise<moveit_msgs::PlanningScene>("planning_scene", 1);
  ros::WallDuration sleep_t(0.5);
  while (planning_scene_diff_publisher.getNumSubscribers() < 1)
  {
    sleep_t.sleep();
  }
  /****************************************************/
  moveit_msgs::PlanningScene planning_scene;

  std::string path ="/home/xbbleon/catkin_ws/src/moveit_tutorials";
  // std::string path = ros::package::getPath("moveit_tutorials");
  path += "/doc/perception_pipeline/bags/";
  pcl::PointCloud<pcl::PointXYZ> cloud;
  pcl::io::loadPCDFile(path+"bunny.pcd",cloud);
  std::cout<<"size1:"<<cloud.points.size()<<std::endl;
  octomap::OcTree tree( 0.01 );
  for(auto p: cloud.points)
  {
    tree.updateNode( octomap::point3d(p.x, p.y, p.z), true );
  }
  tree.updateInnerOccupancy();


  static octomap_msgs::Octomap octomap;
  octomap_msgs::binaryMapToMsg(tree, octomap);
  std::cout<<"size2:"<<octomap.data.size()<<std::endl;
  
  planning_scene.world.octomap.header.frame_id = "base_link";
  //planning_scene.world.octomap.header.stamp = ros::Time::now();
  planning_scene.world.octomap.octomap.header.frame_id = "base_link";
  //planning_scene.world.octomap.octomap.header.stamp = ros::Time::now();
  planning_scene.world.octomap.octomap.binary = true;
  planning_scene.world.octomap.octomap.id = "OcTree";
  planning_scene.world.octomap.octomap.data = octomap.data;
  planning_scene.world.octomap.octomap.resolution = 0.01;
  planning_scene.is_diff = true;
  planning_scene_diff_publisher.publish(planning_scene);

  /****************************************************/
  // pcl::io::loadPCDFile(path+"dragon.pcd",cloud);
  // octomap::OcTree ocTree( 0.01 );
  // for(auto p: cloud.points)
  // {
  //   ocTree.updateNode( octomap::point3d(p.x, p.y, p.z), true );
  // }
  // ocTree.updateInnerOccupancy();
  // octomap_msgs::binaryMapToMsg(ocTree, octomap);
  // planning_scene.world.octomap.octomap.data = octomap.data;
  // //planning_scene.world.octomap.octomap.data.clear();
  // planning_scene.world.octomap.octomap.resolution = 0;
  // planning_scene.is_diff = true;
  // planning_scene_diff_publisher.publish(planning_scene);
  
  ros::shutdown();
  return 0;
}

```
里面有一些没用的头文件，懒得删除了。其中path是.pcd文件的路径。
然后在CMakeLists.txt文件中加入以下：

```
add_executable(octomap_demo src/octomap_demo.cpp)
target_link_libraries(octomap_demo ${catkin_LIBRARIES})
add_dependencies(octomap_demo irb1200_control_generate_messages_cpp)
```
然后编译ws。

进行测试，打开一个终端：

```
roslaunch irb1200_control motion_planning.launch 
```
在另一个终端中输入：

```
rosrun irb1200_control octomap_demo
```
可以看到机器人基座旁边有一个兔子形状的octomap，这个兔子就是bunny。

注意：可能你第一次运行兔子没有显示出来。这个时候通过rviz的add按钮，添加MotionPlanning插件，然后就可以看到了。然后ctrl+s，下次启动rviz的时候就会安装上一次的配置加载moveit插件了。原理就是rviz本身是不订阅/planning_scene话题的，move_group节点是订阅的，所以在rviz中不显示，但是move_group知道这个障碍物的存在，当rviz加载了moveit插件就订阅了/planning_scene话题也就显示了障碍物。
### 3 基于octomap的碰撞避免
这部分就是1、2步的结合。在src目录下新建obstacle_avoidance_demo.cpp，写入以下内容：

```
/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2012, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta, Michael Lautman */

#include <ros/ros.h>
#include <geometry_msgs/Pose.h>
#include <ros/package.h>
// MoveIt!
#include <moveit_msgs/PlanningScene.h>
#include <moveit_msgs/GetStateValidity.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/ApplyPlanningScene.h>

#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/robot_state/conversions.h>
#include <moveit/move_group_interface/move_group_interface.h>

#include <octomap/octomap.h>
#include <octomap_msgs/Octomap.h>
#include <pcl/point_cloud.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/io/pcd_io.h>
#include <octomap_msgs/conversions.h>

int main(int argc, char** argv)
{
  ros::init(argc, argv, "planning_scene_ros_api_tutorial");
  ros::AsyncSpinner spinner(1);
  spinner.start();

  ros::NodeHandle node_handle;
  ros::Publisher planning_scene_diff_publisher = node_handle.advertise<moveit_msgs::PlanningScene>("planning_scene", 1);
  ros::WallDuration sleep_t(0.5);
  while (planning_scene_diff_publisher.getNumSubscribers() < 1)
  {
    sleep_t.sleep();
  }

  /**
   * 创建新的octomap障碍物
   * 
  */
  /****************************************************/
  moveit_msgs::PlanningScene planning_scene;

  //std::string path ="/home/xbbleon/catkin_ws/src/moveit_tutorials";
  // std::string path = ros::package::getPath("moveit_tutorials");
  //path += "/doc/perception_pipeline/bags/";
  pcl::PointCloud<pcl::PointXYZ> cloud;
  //pcl::io::loadPCDFile(path+"bunny.pcd",cloud);
  std::cout<<"size1:"<<cloud.points.size()<<std::endl;

  cloud.width = 100;
  cloud.height = 1;
  cloud.points.resize(cloud.width * cloud.height);
  
  for(size_t i = 0; i < cloud.points.size(); i++)
  {
    cloud.points[i].x = 100 * rand() / double(RAND_MAX) ;
    cloud.points[i].y = 100 * rand() / double(RAND_MAX) ;
    cloud.points[i].z = 100 * rand() / double(RAND_MAX) ;
  }
  std::cout<<"size1:"<<cloud.points.size()<<std::endl;
  octomap::OcTree tree( 0.01 );
  for(auto p: cloud.points)
  {
    tree.updateNode( octomap::point3d(p.x, p.y, p.z), true );
  }
  tree.updateInnerOccupancy();


  static octomap_msgs::Octomap octomap;
  octomap_msgs::binaryMapToMsg(tree, octomap);
  std::cout<<"size2:"<<octomap.data.size()<<std::endl;
  
  planning_scene.world.octomap.header.frame_id = "base_link";
  //planning_scene.world.octomap.header.stamp = ros::Time::now();
  planning_scene.world.octomap.octomap.header.frame_id = "base_link";
  //planning_scene.world.octomap.octomap.header.stamp = ros::Time::now();
  planning_scene.world.octomap.octomap.binary = true;
  planning_scene.world.octomap.octomap.id = "OcTree";
  planning_scene.world.octomap.octomap.data = octomap.data;
  planning_scene.world.octomap.octomap.resolution = 0.01;
  planning_scene.is_diff = true;
  planning_scene_diff_publisher.publish(planning_scene);

  /****************************************************/

  sleep(2.0);
  /**
   * 执行运动规划
   * 
  */
  moveit::planning_interface::MoveGroupInterface plan_group("irb1200");
  plan_group.setPlannerId("BiTRRTkConfigDefault");
  std::vector<double> currentJoints = plan_group.getCurrentJointValues();
  for(std::size_t i=0; i<currentJoints.size();i++)
  {
    ROS_INFO_STREAM("current Joint"<<(i+1)<<":"<<currentJoints[i]);
  }  
  //设定目标关节
  std::vector<double> targetJoints = currentJoints;
  targetJoints[0] = 0;
  targetJoints[1] = 0;
  targetJoints[2] = -3.49;
  targetJoints[3] = 4.5;
  targetJoints[4] = 2.0;
  targetJoints[5] = 0.0;
  //设置误差范围
  plan_group.setGoalTolerance(0.001);
  plan_group.setJointValueTarget(targetJoints);

  moveit::planning_interface::MoveGroupInterface::Plan goal_plan;
  if(plan_group.plan(goal_plan))
  {
    plan_group.execute(goal_plan);
  }

  ros::shutdown();
  return 0;
}

```
然后在CMake文件中写入：

```
add_executable(obstacle_avoidance_demo src/obstacle_avoidance_demo.cpp)
target_link_libraries(obstacle_avoidance_demo ${catkin_LIBRARIES})
add_dependencies(obstacle_avoidance_demo irb1200_control_generate_messages_cpp)
```
然后编译一下ws。

最后测试一下，打开一个终端：

```
roslaunch irb1200_control motion_planning.launch 
```
在另一个终端中输入：

```
rosrun irb1200_control obstacle_avoidance_demo
```
可以看到有界面里面有很多零散的小方块，然后机器人会运动起来。也可以直接通过moveit界面拖动机器人进行轨迹规划，可以发现规划的过程中机器人不会撞到小方块。

### 4 轨迹插值
为什么要做插值？原因如下，由路径规划算法生成出来的轨迹是一系列离散点，如果直接把这些点给机器人控制器，控制的效果肯定不好。并且，那些路径点waypoints是没有速度信息的，要把路径变成轨迹，那么就需要插值了。

轨迹插值其实是一个很复杂的问题，根据规划目标的不同，有不同插值方法。

一般来说，只给定位置和时间两个已知量，要求速度变化光滑，加速度连续但是不光滑，这时常用的插值方法就是三次样条插值。

这里我本来是考虑给定每个点的时间、位置还有速度大小约束，但是发现虽然在已知点上速度是满足约束，但是在这些waypoint之间速度的大小变化是不可控的，这部分还需要再看看怎么弄。目前来说，如果不考虑速度大小的约束，用三次样条是一个很好的选择。

三次样条插值代码我这里主要参考[古月的博客](http://www.guyuehome.com/752)然后再稍加修改。


